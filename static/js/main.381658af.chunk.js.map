{"version":3,"sources":["components/global/MainMenu.js","actions/menuActions.js","components/global/Header.js","pages/home/Home.js","actions/pageContentActions.js","components/App.js","serviceWorker.js","reducers/menuItemsReducer.js","reducers/pageContentsReducer.js","reducers/index.js","store/index.js","index.js","assets/logo.svg"],"names":["Header","this","props","getMenuItems","menuItems","className","map","menuItem","key","to","relative","title","Component","connect","state","items","dispatch","axios","get","then","response","type","menuItemsPayload","data","catch","error","console","log","Container","Row","Col","Image","src","logo","alt","Home","getHomePage","homePage","ReactHtmlParser","body","value","pageContents","homePagePayload","App","Boolean","window","location","hostname","match","initialState","allPagesContents","combineReducers","action","allPageContentsPayload","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"iVAWMA,G,kMAEFC,KAAKC,MAAMC,iB,+BAGH,IACAC,EAAcH,KAAKC,MAAnBE,UAER,OACE,yBAAKC,UAAU,kCACXD,EAAUE,KAAI,SAAAC,GACd,OACE,kBAAC,IAAD,CACEC,IAAMD,EAASC,IACfC,GAAKF,EAASG,UAEZH,EAASI,e,GAhBJC,cA+BNC,eANS,SAAAC,GACtB,MAAO,CACLV,UAAWU,EAAMV,UAAUW,SAIS,CAAEZ,aCrCd,WAC1B,OAAO,SAASa,GACd,OAAOC,IAAMC,IAAI,iEACdC,MAAK,SAAAC,GACJJ,EAAS,CAAEK,KAPW,iBAOWC,iBAAkBF,EAASG,UAE7DC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,SD8BLZ,CAA2Cb,G,iBEV3CA,G,uLAjBX,OACE,4BAAQK,UAAU,eAChB,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKxB,UAAU,mBACb,kBAACyB,EAAA,EAAD,CAAKzB,UAAU,oBACb,kBAAC0B,EAAA,EAAD,CAAOC,IAAMC,IAAOC,IAAI,UAE1B,kBAACJ,EAAA,EAAD,CAAKzB,UAAU,oBACb,kBAAC,EAAD,c,GAVOO,c,iBCDfuB,G,mMAEFlC,KAAKC,MAAMkC,gB,+BAGH,IACAC,EAAapC,KAAKC,MAAlBmC,SAER,OACE,kBAACT,EAAA,EAAD,CAAWvB,UAAU,QACM,qBAAhBgC,EAAS,IAChBC,IAAgBD,EAAS,GAAGE,KAAK,GAAGC,Y,GAX3B5B,cAwBJC,eANS,SAAAC,GACtB,MAAO,CACLuB,SAAUvB,EAAM2B,aAAaJ,YAIO,CAAED,YC9Bf,WACzB,OAAO,SAASpB,GACd,OAAOC,IAAMC,IAAI,kEACdC,MAAK,SAAAC,GACJJ,EAAS,CAAEK,KARU,gBAQWqB,gBAAiBtB,EAASG,UAE3DC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,SDuBLZ,CAA0CsB,GEb1CQ,G,wLATX,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUO,cCAEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCfAC,EAAe,CACnBlC,MAAO,ICEHkC,EAAe,CACnBZ,SAAU,GACVa,iBAAkB,ICHLC,cAAgB,CAC7B/C,UFCuB,WAAmC,IAAlCU,EAAiC,uDAAzBmC,EAAcG,EAAW,uCACzD,OAAQA,EAAO/B,MACb,INP0B,iBMQxB,OAAO,eACFP,EADL,CAEEC,MAAOqC,EAAO9B,mBAElB,QACE,OAAOR,IERX2B,aDI0B,WAAmC,IAAlC3B,EAAiC,uDAAzBmC,EAAcG,EAAW,uCAC5D,OAAQA,EAAO/B,MACb,IJXyB,gBIYvB,OAAO,eACFP,EADL,CAEEuB,SAAUe,EAAOV,kBAErB,IJfiC,wBIgB/B,OAAO,eACF5B,EADL,CAEEoC,iBAAkBE,EAAOC,yBAE7B,QACE,OAAOvC,MEnBPwC,EAAiBT,OAAOU,sCAAwCC,IAQvDC,EALDC,YACZC,EACAL,EAAeM,YAAgBC,O,OCMjCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAQA,GAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJO,SAASC,eAAe,SL6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8C,a,mBMzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.381658af.chunk.js","sourcesContent":["// Global components.\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n// Redux.\nimport { connect } from \"react-redux\";\nimport { getMenuItems } from '../../actions/menuActions';\n\n// Styles.\nimport '../../styles/components/global/MainMenu.scss';\n\nclass Header extends Component {\n  componentDidMount() {\n    this.props.getMenuItems();\n  }\n\n  render() {\n    const { menuItems } = this.props;\n\n    return (\n      <div className=\"d-flex justify-content-between\">\n        { menuItems.map(menuItem => {\n          return (\n            <Link\n              key={ menuItem.key }\n              to={ menuItem.relative }\n            >\n              { menuItem.title }\n            </Link>\n          )\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    menuItems: state.menuItems.items\n  };\n}\n\nexport default connect(mapStateToProps, { getMenuItems })(Header);\n","import axios from 'axios';\n\nexport const GET_MENU_ITEMS = 'GET_MENU_ITEMS';\n\n// Main menu items.\nexport const getMenuItems = () => {\n  return function(dispatch) {\n    return axios.get('https://private-f5bbc-rafaelnogueira.apiary-mock.com/api/menu')\n      .then(response => {\n        dispatch({ type: GET_MENU_ITEMS, menuItemsPayload: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n};\n","// Global components.\nimport React, { Component } from 'react';\nimport { Container, Col, Image, Row } from 'react-bootstrap';\n\n// Custom components.\nimport MainMenu from './MainMenu';\n\n// Assets.\nimport logo from '../../assets/logo.svg';\n\n// Styles.\nimport '../../styles/components/global/Header.scss';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"App__header\">\n        <Container>\n          <Row className=\"App__header-row\">\n            <Col className=\"App__header-logo\">\n              <Image src={ logo } alt=\"logo\" />\n            </Col>\n            <Col className=\"App__header-menu\">\n              <MainMenu />\n            </Col>\n          </Row>\n        </Container>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","// Global components.\nimport React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport ReactHtmlParser from 'react-html-parser';\n\n// Redux.\nimport { connect } from \"react-redux\";\nimport { getHomePage } from '../../actions/pageContentActions';\n\n// Styles.\nimport '../../styles/pages/home/Home.scss';\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.getHomePage();\n  }\n\n  render() {\n    const { homePage } = this.props;\n\n    return (\n      <Container className=\"mt-5\">\n        { typeof homePage[0] !== 'undefined' &&\n          ReactHtmlParser(homePage[0].body[0].value)\n        }\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    homePage: state.pageContents.homePage\n  };\n}\n\nexport default connect(mapStateToProps, { getHomePage })(Home);\n","import axios from 'axios';\n\nexport const GET_HOME_PAGE = 'GET_HOME_PAGE';\nexport const GET_ALL_PAGE_CONTENTS = 'GET_ALL_PAGE_CONTENTS';\n\n// Get the home page.\nexport const getHomePage = () => {\n  return function(dispatch) {\n    return axios.get('https://private-f5bbc-rafaelnogueira.apiary-mock.com/api/front')\n      .then(response => {\n        dispatch({ type: GET_HOME_PAGE, homePagePayload: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n};\n\n// Page contents.\nexport const getAllPageContents = () => {\n  return function(dispatch) {\n    return axios.get('http://nogueira-api.local/jsonapi/node/page')\n      .then(response => {\n        dispatch({ type: GET_ALL_PAGE_CONTENTS, allPageContentsPayload: response.data });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n};\n","// Global components.\nimport React, { Component } from 'react';\n\n// Custom components.\nimport Header from './global/Header';\n\n// Pages.\nimport Home from '../pages/home/Home';\n\n// Styles.\nimport '../styles/components/App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Constants.\nimport { GET_MENU_ITEMS } from '../actions/menuActions';\n\nconst initialState = {\n  items: []\n};\n\nexport const menuItems = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_MENU_ITEMS:\n      return {\n        ...state,\n        items: action.menuItemsPayload\n      }\n    default:\n      return state\n  }\n}\n","// Constants.\nimport {\n  GET_HOME_PAGE,\n  GET_ALL_PAGE_CONTENTS\n} from '../actions/pageContentActions';\n\nconst initialState = {\n  homePage: [],\n  allPagesContents: []\n};\n\nexport const pageContents = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_HOME_PAGE:\n      return {\n        ...state,\n        homePage: action.homePagePayload\n      }\n    case GET_ALL_PAGE_CONTENTS:\n      return {\n        ...state,\n        allPagesContents: action.allPageContentsPayload\n      }\n    default:\n      return state\n  }\n}\n","// Redux.\nimport { combineReducers } from 'redux';\nimport { menuItems } from './menuItemsReducer';\nimport { pageContents } from './pageContentsReducer';\n\nexport default combineReducers({\n  menuItems,\n  pageContents\n});\n","// Redux.\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Create the store to keep our states.\nconst store = createStore(\n  rootReducer,\n  storeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","// Global components.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// The app.\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux.\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// Styles.\nimport './styles/index.scss';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.71a9c378.svg\";"],"sourceRoot":""}